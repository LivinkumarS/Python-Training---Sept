Python:
>> High level and interpreted Programming language. General purpose language.

compilation:
>> The entire code is converted into machine code (binary code) before execution.
c, c++, java              

interpretation:
>> Code is converted line by line.
Python

Extension to create python file --> .py
command to execute a python file in cli --> "python filename.py"

to show something in output
----------------------------
print(val)

to prompt data from user
--------------------------
input()  ---> always return a string

variables 
---------
>> just a containers, used to store a piece of data.
varName = value

Naming rules:
--------------
>> must start with a letter or "_"
>> can contain numerical, letters and "_"
>> case sensitive. a=A
>> cannot use keywords as variable name

Comments
-----------
To increase readability.

Single line comment ---> #
Multiple line comment ---> ''' comment '''

Basic sytax of Python
---------------------
>> Python is case-sensitive.(a not equal to A)
>> Indentation matters (no {}. use space)

Datatypes of Python 
-------------------

type(obj)---> return datatype of an object. <class 'bool'>

int --> whole numbers---> -1,-2,0,1,2,3,4
float--> decimal numbers --> 1.23,4.556

string---> sequence of chars --> '' or "" 
+ --> str1 + str2 (concatination)
string-formatting
-------------------
f'' ---> f"  {var1}  {var2}...."

boolean---> True or False

Type casting
-------------
int() ---> anything into int
str() ---> anything into str
float() ---> anything into float


Operators
-----------

2 + 3 = 5  --> expression. + --> operator

>> Operators are special symbols that perform operations on values.

Arithmetice Operator 
--------------------
Addition  ---> + 
Subtraction ---> -
multiplication --> *
division --> /
floor division --> //
modulus ---> % (reminder). 4%8 --> 8*0--> 4-0--> 4
Exponential --> **. ex: 2**4

BODMAS--> Brackets Order(Of) Div Mul Add Sub.

Comparison Operator (Relational) (Boolean Values) 
-------------------
== --> Equal.
< ---> lesser than
> --> Greater than
<= --> lesser than or equal to
>= --> greater than or equal to

Logical Operators 
------------------(operates with boolean values) (boolean)

AND --> and --> performs AND operation with two boolean values.
OR  --> or  --> performs OR operation with two boolean values.

bool1   bool2   AND     OR   
True    True    True    True
False   True    False   True
True    False   False   True
False   False   False   False

NOT --> not --> operates with only one bool. revert.


Assignment Operator 
-------------------
= --> equals
+= --> add and assign.
-= --> sub assign.
*= --> mul and assign
/= --> div and assign
//= --> floor div and assign
%= --> mod and assign
**= --> expo and assign

Bitwise Operator  (bits)
-----------------
AND --> & --> AND operation between bits.
OR  --> | --> Or operation between bits.
NOT --> ~ --> NOT operation between bits. ~n=-(n+1)
Right shift --> >> --> move the bits towards right for specified positions. 10>>2
Left shift --> << --> move the bits towards left for specified positions. 10<<2


Control Flow
--------------
>> It executes a block of code based on a condition.

if:
----
if condition:
    block of code 
>> if the condition is True---> block of code will get executed.

elif:
------
elif condition:
    block of code
>> if the condition is True---> block of code will get executed.
>> the condition will be evaluated only if the above conditions failed.

else:
    block of code 

>> if the condition provided in if block is False---> else  block will get executed.

mark=int 

90<mark --> O.
80-89--> A
70-79--> B
60-69--> C
50-59--> D
mark<50--> Fail

Nested If 
----------
>> if block inside another if block.

if condition:
    if condition:
        block of code



Iterable Object 
-------------------
Ex: String....
a="Hello World!"
a[0] = char that presents at 0th index.



Loops
------
>> Repeating a block of code until a condition is met.
>> It avoids repetition of code.

While:
-------

>> As long as the condition is True, it keeps executing the code.
>> Each execution is called iteration.

Infinite loop is an error.

while condition:
    #block of code

For:
-----
Iterate over different sequences(an iterable object)

for var in Sequence:
    Block of code

range ---> in built method ---> used to create a temp iteratable object for given range.

range(5)---> [0,1,2,3,4].
range(start,end)---> [20-100] ---> range(20,101)-->[20,21,22..101]
range(start, end, step) ---> range(2,20,3)-->[2,5,8,11,14,17]

Control Statements:
--------------------
break ---> this is used to break the loop
continue ---> this is used to skip the current iteration.